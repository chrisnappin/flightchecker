// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import domain "github.com/chrisnappin/flightchecker/pkg/domain"
import mock "github.com/stretchr/testify/mock"

// AirportDataLoader is an autogenerated mock type for the AirportDataLoader type
type AirportDataLoader struct {
	mock.Mock
}

// LoadAirports provides a mock function with given fields: filename, countries, regions
func (_m *AirportDataLoader) LoadAirports(filename string, countries map[string]string, regions map[string]string) (map[string]domain.Airport, error) {
	ret := _m.Called(filename, countries, regions)

	var r0 map[string]domain.Airport
	if rf, ok := ret.Get(0).(func(string, map[string]string, map[string]string) map[string]domain.Airport); ok {
		r0 = rf(filename, countries, regions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]domain.Airport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, map[string]string, map[string]string) error); ok {
		r1 = rf(filename, countries, regions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadCountries provides a mock function with given fields: filename
func (_m *AirportDataLoader) LoadCountries(filename string) (map[string]string, error) {
	ret := _m.Called(filename)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(string) map[string]string); ok {
		r0 = rf(filename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadRegions provides a mock function with given fields: filename
func (_m *AirportDataLoader) LoadRegions(filename string) (map[string]string, error) {
	ret := _m.Called(filename)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(string) map[string]string); ok {
		r0 = rf(filename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
